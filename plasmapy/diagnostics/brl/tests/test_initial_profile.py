"""Test that the initial profile is correctly generated."""

import numpy as np
import pytest

from plasmapy.diagnostics.brl import initial_profile
from plasmapy.diagnostics.brl.net_spacing import get_s_points, get_x_and_dx_ds


@pytest.mark.parametrize(
    (
        "coefficients",
        "normalized_probe_potential",
        "normalized_probe_radius",
        "x_points",
        "dx_ds_points",
        "spherical",
        "expected_z",
        "expected_dchi_ds",
        "expected_eta",
    ),
    zip(
        [
            np.array([1., 1., 1., 1., 1., 1., 1., 1., 1.]),
            np.array([0., 1., 2., 3., 4., 5., 6., 7., 8.]),
        ],
        [
            1,
            10,
        ],
        [
            1,
            2**0.5,
        ],
        [
            np.array([1.0, 0.95652874, 0.91494723, 0.87517332, 0.83712843, 0.8007374, 0.76592834, 0.73263247, 0.70078401, 0.67032005]),
            np.array([1.0, 0.95122942, 0.90483742, 0.86070798, 0.81873075]),
        ],
        [
            np.array([-1.0, -0.95652874, -0.91494723, -0.87517332, -0.83712843, -0.8007374 , -0.76592834, -0.73263247, -0.70078401, -0.67032005]),
            np.array([-1.0, -0.95122942, -0.90483742, -0.86070798, -0.81873075])
        ],
        [
            True,
            False,
        ],
        [
            np.array([1.0, 0.80390446, 0.65135942, 0.53186217, 0.43758185, 0.36265505, 0.30267182, 0.25429964, 0.21500762, 0.1828636]),
            np.array([10.0, 7.68088972, 5.93381904, 4.61164307, 3.60619087])
        ],
        [
            np.array([-5.0, -3.87684065, -3.02671362, -2.37976806, -1.88464428, -1.50346003, -1.20818025, -0.97798354, -0.79734754, -0.65465412]),
            np.array([-53.33333333, -40.09340656, -30.2751221, -22.96902443, -17.51235483]),
        ],
        [
            np.array([-24.0, -16.48650496, -11.37863761, -7.89239534, -5.50292251, -3.85786865, -2.71998516, -1.92901722, -1.37635105, -0.98810852]),
            np.array([-153.33333333, -102.7242156, -69.05024154, -46.58060901, -31.54176446])
        ],
    )
)
def test_evaluate_polynomial(
    coefficients,
    normalized_probe_potential,
    normalized_probe_radius,
    x_points,
    dx_ds_points,
    spherical,
    expected_z,
    expected_dchi_ds,
    expected_eta,
):
    z, dchi_ds, eta = initial_profile.evaluate_polynomial(
        coefficients, normalized_probe_potential, normalized_probe_radius, x_points, dx_ds_points, spherical=spherical
    )

    assert np.isclose(z[0], normalized_probe_potential)
    assert np.allclose(z, expected_z)
    assert np.allclose(dchi_ds, expected_dchi_ds)
    assert np.allclose(eta, expected_eta)
    assert z.size == x_points.size
    assert dchi_ds.size == x_points.size
    assert eta.size == x_points.size


@pytest.mark.parametrize(
    (
        "power_law_coefficient",
        "normalized_probe_potential",
        "normalized_probe_radius",
        "effective_attracted_to_repelled_temperature",
        "x_points",
        "dx_ds_points",
        "spherical",
        "expected_z",
        "expected_dchi_ds",
        "expected_eta",
    ),
    (
        (
            0.5,
            10,
            1,
            20,
            np.array([1.0, 0.9895288919912618, 0.9791674280854542, 0.9689144601873331, 0.9587688522234832, 0.9487294800164372, 0.938795231160111, 0.9289650048965451, 0.9192377119939354, 0.9096122746259415, 0.9000876262522592, 0.8906627115004431, 0.8813364860489663, 0.8721079165115058, 0.8629759803224382, 0.8539396656235352, 0.8449979711518454, 0.8361499061287497, 0.8273944901501793, 0.8187307530779818]),
            np.array([-1.0, -0.9895288919912618, -0.9791674280854542, -0.9689144601873331, -0.9587688522234832, -0.9487294800164372, -0.938795231160111, -0.9289650048965451, -0.9192377119939354, -0.9096122746259415, -0.9000876262522592, -0.8906627115004431, -0.8813364860489663, -0.8721079165115058, -0.8629759803224382, -0.8539396656235352, -0.8449979711518454, -0.8361499061287497, -0.8273944901501793, -0.8187307530779818]),
            True,
            np.array([10.0, 9.791402096685799, 9.5866187993706, 9.385587588285917, 9.188247004396999, 8.994536627930948, 8.804397057348426, 8.617769888750777, 8.434597695714466, 8.254824009545025, 8.078393299942785, 7.905250956072875, 7.735343268032108, 7.568617408705594, 7.405021416005976, 7.244504175488426, 7.087015403334638, 6.9325056296992065, 6.7809261824119345, 6.632229171029715]),
            np.array([-20.0, -19.63460863267161, -19.27520771883965, -18.921695454638375, -18.573972097367164, -18.231939922951877, -17.89550318419549, -17.56456806980104, -17.23904266414972, -16.918836907817926, -16.603862558817145, -16.294033154540998, -15.989263974404206, -15.689472003158583, -15.39457589487152, -15.104495937552807, -14.81915401841599, -14.538473589760837, -14.262379635463855, -13.990798638064033]),
            np.array([-15.0, -14.48325347849336, -13.985151658192535, -13.504976292975027, -13.042038155945775, -12.59567584599392, -12.165254643514992, -11.750165413273315, -11.349823552462588, -10.96366798210288, -10.591160179989057, -10.231783253479112, -9.885041050481647, -9.550457307069273, -9.227574830209635, -8.915954714167958, -8.615175589194646, -8.324832901168621, -8.044538220921941, -7.773918582023734]),
        ),
        (
            0.1,
            5,
            0.4,
            10,
            np.array([1.0, 0.9780228724846005, 0.9565287391030293, 0.9355069850316178, 0.914947228730031, 0.8948393168143698, 0.8751733190429475, 0.8559395234122652, 0.8371284313607636, 0.8187307530779818]),
            np.array([-1.0, -0.9780228724846005, -0.9565287391030293, -0.9355069850316178, -0.914947228730031, -0.8948393168143698, -0.8751733190429475, -0.8559395234122652, -0.8371284313607636, -0.8187307530779818]),
            False,
            np.array([5.0, 4.899466599102914, 4.800083534733663, 4.701843459330048, 4.604739392502682, 4.508764716011348, 4.41391316851683, 4.320178840092641, 4.227556166480944, 4.136039923076853]),
            np.array([-4.55, -4.498063973895216, -4.446466922444712, -4.395192213034849, -4.344223434295173, -4.2935444058545364, -4.243139188794437, -4.192992096806245, -4.143087708057475, -4.09341087777058]),
            np.array([-14.656249999999998, -13.925675609524271, -13.235230268840956, -12.582565084844278, -11.965470109415572, -11.381866174670648, -10.829797208841287, -10.307423004326191, -9.813012411139242, -9.344936930574045]),
        )
    )
)
def test_evaluate_debye_and_power_law(
    power_law_coefficient,
    normalized_probe_potential,
    normalized_probe_radius,
    effective_attracted_to_repelled_temperature,
    x_points,
    dx_ds_points,
    spherical,
    expected_z,
    expected_dchi_ds,
    expected_eta,
):
    z, dchi_ds, eta = initial_profile.evaluate_debye_and_power_law(
        power_law_coefficient,
        normalized_probe_potential,
        normalized_probe_radius,
        effective_attracted_to_repelled_temperature,
        x_points,
        dx_ds_points,
        spherical=spherical,
    )

    assert np.allclose(z, expected_z)
    assert np.allclose(dchi_ds, expected_dchi_ds)
    assert np.allclose(eta, expected_eta)
    assert z.size == x_points.size
    assert dchi_ds.size == x_points.size
    assert eta.size == x_points.size
