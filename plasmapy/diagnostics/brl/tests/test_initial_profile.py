"""Test that the initial profile is correctly generated."""

import numpy as np
import pytest

from plasmapy.diagnostics.brl import initial_profile


@pytest.mark.parametrize(
    (
        "coefficients",
        "normalized_probe_potential",
        "normalized_probe_radius",
        "x_points",
        "dx_ds_points",
        "spherical",
        "expected_z",
        "expected_dchi_ds",
        "expected_eta",
    ),
    zip(
        [
            np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]),
            np.array([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]),
        ],
        [
            1,
            10,
        ],
        [
            1,
            2**0.5,
        ],
        [
            np.array(
                [
                    1.0,
                    0.95652874,
                    0.91494723,
                    0.87517332,
                    0.83712843,
                    0.8007374,
                    0.76592834,
                    0.73263247,
                    0.70078401,
                    0.67032005,
                ]
            ),
            np.array([1.0, 0.95122942, 0.90483742, 0.86070798, 0.81873075]),
        ],
        [
            np.array(
                [
                    -1.0,
                    -0.95652874,
                    -0.91494723,
                    -0.87517332,
                    -0.83712843,
                    -0.8007374,
                    -0.76592834,
                    -0.73263247,
                    -0.70078401,
                    -0.67032005,
                ]
            ),
            np.array([-1.0, -0.95122942, -0.90483742, -0.86070798, -0.81873075]),
        ],
        [
            True,
            False,
        ],
        [
            np.array(
                [
                    1.0,
                    0.80390446,
                    0.65135942,
                    0.53186217,
                    0.43758185,
                    0.36265505,
                    0.30267182,
                    0.25429964,
                    0.21500762,
                    0.1828636,
                ]
            ),
            np.array([10.0, 7.68088972, 5.93381904, 4.61164307, 3.60619087]),
        ],
        [
            np.array(
                [
                    -5.0,
                    -3.87684065,
                    -3.02671362,
                    -2.37976806,
                    -1.88464428,
                    -1.50346003,
                    -1.20818025,
                    -0.97798354,
                    -0.79734754,
                    -0.65465412,
                ]
            ),
            np.array(
                [-53.33333333, -40.09340656, -30.2751221, -22.96902443, -17.51235483]
            ),
        ],
        [
            np.array(
                [
                    -24.0,
                    -16.48650496,
                    -11.37863761,
                    -7.89239534,
                    -5.50292251,
                    -3.85786865,
                    -2.71998516,
                    -1.92901722,
                    -1.37635105,
                    -0.98810852,
                ]
            ),
            np.array(
                [-153.33333333, -102.7242156, -69.05024154, -46.58060901, -31.54176446]
            ),
        ],
    ),
)
def test_evaluate_polynomial(
    coefficients,
    normalized_probe_potential,
    normalized_probe_radius,
    x_points,
    dx_ds_points,
    spherical,
    expected_z,
    expected_dchi_ds,
    expected_eta,
):
    z, dchi_ds, eta = initial_profile.evaluate_polynomial(
        coefficients,
        normalized_probe_potential,
        normalized_probe_radius,
        x_points,
        dx_ds_points,
        spherical=spherical,
    )

    assert np.isclose(z[0], normalized_probe_potential)
    assert np.allclose(z, expected_z)
    assert np.allclose(dchi_ds, expected_dchi_ds)
    assert np.allclose(eta, expected_eta)
    assert z.size == x_points.size
    assert dchi_ds.size == x_points.size
    assert eta.size == x_points.size


@pytest.mark.parametrize(
    (
        "power_law_coefficient",
        "normalized_probe_potential",
        "normalized_probe_radius",
        "effective_attracted_to_repelled_temperature",
        "x_points",
        "dx_ds_points",
        "spherical",
        "expected_z",
        "expected_dchi_ds",
        "expected_eta",
    ),
    (
        (
            0.5,
            10,
            1,
            20,
            np.array(
                [
                    1.0,
                    0.9895288919912618,
                    0.9791674280854542,
                    0.9689144601873331,
                    0.9587688522234832,
                    0.9487294800164372,
                    0.938795231160111,
                    0.9289650048965451,
                    0.9192377119939354,
                    0.9096122746259415,
                    0.9000876262522592,
                    0.8906627115004431,
                    0.8813364860489663,
                    0.8721079165115058,
                    0.8629759803224382,
                    0.8539396656235352,
                    0.8449979711518454,
                    0.8361499061287497,
                    0.8273944901501793,
                    0.8187307530779818,
                ]
            ),
            np.array(
                [
                    -1.0,
                    -0.9895288919912618,
                    -0.9791674280854542,
                    -0.9689144601873331,
                    -0.9587688522234832,
                    -0.9487294800164372,
                    -0.938795231160111,
                    -0.9289650048965451,
                    -0.9192377119939354,
                    -0.9096122746259415,
                    -0.9000876262522592,
                    -0.8906627115004431,
                    -0.8813364860489663,
                    -0.8721079165115058,
                    -0.8629759803224382,
                    -0.8539396656235352,
                    -0.8449979711518454,
                    -0.8361499061287497,
                    -0.8273944901501793,
                    -0.8187307530779818,
                ]
            ),
            True,
            np.array(
                [
                    10.0,
                    9.791402096685799,
                    9.5866187993706,
                    9.385587588285917,
                    9.188247004396999,
                    8.994536627930948,
                    8.804397057348426,
                    8.617769888750777,
                    8.434597695714466,
                    8.254824009545025,
                    8.078393299942785,
                    7.905250956072875,
                    7.735343268032108,
                    7.568617408705594,
                    7.405021416005976,
                    7.244504175488426,
                    7.087015403334638,
                    6.9325056296992065,
                    6.7809261824119345,
                    6.632229171029715,
                ]
            ),
            np.array(
                [
                    -20.0,
                    -19.63460863267161,
                    -19.27520771883965,
                    -18.921695454638375,
                    -18.573972097367164,
                    -18.231939922951877,
                    -17.89550318419549,
                    -17.56456806980104,
                    -17.23904266414972,
                    -16.918836907817926,
                    -16.603862558817145,
                    -16.294033154540998,
                    -15.989263974404206,
                    -15.689472003158583,
                    -15.39457589487152,
                    -15.104495937552807,
                    -14.81915401841599,
                    -14.538473589760837,
                    -14.262379635463855,
                    -13.990798638064033,
                ]
            ),
            np.array(
                [
                    -15.0,
                    -14.48325347849336,
                    -13.985151658192535,
                    -13.504976292975027,
                    -13.042038155945775,
                    -12.59567584599392,
                    -12.165254643514992,
                    -11.750165413273315,
                    -11.349823552462588,
                    -10.96366798210288,
                    -10.591160179989057,
                    -10.231783253479112,
                    -9.885041050481647,
                    -9.550457307069273,
                    -9.227574830209635,
                    -8.915954714167958,
                    -8.615175589194646,
                    -8.324832901168621,
                    -8.044538220921941,
                    -7.773918582023734,
                ]
            ),
        ),
        (
            0.1,
            5,
            0.4,
            10,
            np.array(
                [
                    1.0,
                    0.9780228724846005,
                    0.9565287391030293,
                    0.9355069850316178,
                    0.914947228730031,
                    0.8948393168143698,
                    0.8751733190429475,
                    0.8559395234122652,
                    0.8371284313607636,
                    0.8187307530779818,
                ]
            ),
            np.array(
                [
                    -1.0,
                    -0.9780228724846005,
                    -0.9565287391030293,
                    -0.9355069850316178,
                    -0.914947228730031,
                    -0.8948393168143698,
                    -0.8751733190429475,
                    -0.8559395234122652,
                    -0.8371284313607636,
                    -0.8187307530779818,
                ]
            ),
            False,
            np.array(
                [
                    5.0,
                    4.899466599102914,
                    4.800083534733663,
                    4.701843459330048,
                    4.604739392502682,
                    4.508764716011348,
                    4.41391316851683,
                    4.320178840092641,
                    4.227556166480944,
                    4.136039923076853,
                ]
            ),
            np.array(
                [
                    -4.55,
                    -4.498063973895216,
                    -4.446466922444712,
                    -4.395192213034849,
                    -4.344223434295173,
                    -4.2935444058545364,
                    -4.243139188794437,
                    -4.192992096806245,
                    -4.143087708057475,
                    -4.09341087777058,
                ]
            ),
            np.array(
                [
                    -14.656249999999998,
                    -13.925675609524271,
                    -13.235230268840956,
                    -12.582565084844278,
                    -11.965470109415572,
                    -11.381866174670648,
                    -10.829797208841287,
                    -10.307423004326191,
                    -9.813012411139242,
                    -9.344936930574045,
                ]
            ),
        ),
    ),
)
def test_evaluate_debye_and_power_law(
    power_law_coefficient,
    normalized_probe_potential,
    normalized_probe_radius,
    effective_attracted_to_repelled_temperature,
    x_points,
    dx_ds_points,
    spherical,
    expected_z,
    expected_dchi_ds,
    expected_eta,
):
    z, dchi_ds, eta = initial_profile.evaluate_debye_and_power_law(
        power_law_coefficient,
        normalized_probe_potential,
        normalized_probe_radius,
        effective_attracted_to_repelled_temperature,
        x_points,
        dx_ds_points,
        spherical=spherical,
    )

    assert np.allclose(z, expected_z)
    assert np.allclose(dchi_ds, expected_dchi_ds)
    assert np.allclose(eta, expected_eta)
    assert z.size == x_points.size
    assert dchi_ds.size == x_points.size
    assert eta.size == x_points.size


@pytest.mark.parametrize(
    (
        "z",
        "dchi_ds",
        "x_points",
        "dx_ds_points",
        "spherical",
        "zero_potential_boundary",
        "normalized_probe_potential",
        "expected_corrected_chi",
        "expected_corrected_dchi_ds",
    ),
    (
        (
            np.array(
                [
                    10.0,
                    8.949964460718046,
                    8.055176993976668,
                    7.309858921062052,
                    6.702536542320784,
                    6.217973091098104,
                    5.838962141459562,
                    5.547852637197857,
                    5.327732055246351,
                    5.163246664491994,
                ]
            ),
            np.array(
                [
                    -101.49999999999997,
                    -87.48181149041723,
                    -73.66949368347014,
                    -60.662802326662536,
                    -48.886495425864965,
                    -38.59532531911872,
                    -29.89319034193842,
                    -22.76143355613484,
                    -17.091284077857672,
                    -12.716094887285378,
                ]
            ),
            np.array(
                [
                    1.0,
                    0.9976888228247094,
                    0.9951994697046203,
                    0.9925315375123069,
                    0.9896846175850432,
                    0.9866582955838445,
                    0.9834521513472256,
                    0.9800657587394139,
                    0.9764986854927372,
                    0.9727504930438906,
                ]
            ),
            np.array(
                [
                    -0.19999999999999996,
                    -0.2160178572764373,
                    -0.23207175104714195,
                    -0.2481621732987782,
                    -0.26428962847415094,
                    -0.28045463393626835,
                    -0.29665772045536376,
                    -0.31289943272030185,
                    -0.3291803298758953,
                    -0.3455009860877811,
                ]
            ),
            False,
            False,
            10,
            np.array(
                [
                    10.0,
                    9.018951785695196,
                    8.198649090138838,
                    7.533366237972245,
                    7.011686145193689,
                    6.61843238751464,
                    6.33646273145138,
                    6.148194296198103,
                    6.036786859999165,
                    5.986963272665678,
                ]
            ),
            np.array(
                [
                    -95.53701507572237,
                    -81.02633561033682,
                    -66.7169158587676,
                    -53.20819135346596,
                    -40.92458997521836,
                    -30.120523244322555,
                    -20.899537156460113,
                    -13.242610030833667,
                    -7.040592901411168,
                    -2.126446328394703,
                ]
            ),
        ),
        (
            np.array(
                [
                    5.0,
                    4.329033520596072,
                    3.7859733467941794,
                    3.361657237609172,
                    3.040649864976334,
                    2.804504826937948,
                    2.6344526855468033,
                    2.51330154488352,
                ]
            ),
            np.array(
                [
                    -51.499999999999986,
                    -42.432768058912465,
                    -33.70663385041785,
                    -25.88157723455515,
                    -19.277833981619644,
                    -14.003667682917044,
                    -10.005455152212193,
                    -7.125579517397229,
                ]
            ),
            np.array(
                [
                    1.0,
                    0.996995777822107,
                    0.9936968299316383,
                    0.990102294505997,
                    0.9862112943768447,
                    0.9820229365215738,
                    0.9775363115298907,
                    0.9727504930438906,
                ]
            ),
            np.array(
                [
                    -0.19999999999999996,
                    -0.2206009855881952,
                    -0.24126177310862373,
                    -0.2619834195187405,
                    -0.2827670165376126,
                    -0.3036136923341275,
                    -0.32452461332447236,
                    -0.3455009860877811,
                ]
            ),
            True,
            False,
            5,
            np.array(
                [
                    5.0,
                    4.373004740321693,
                    3.8782295314676696,
                    3.5065247464967917,
                    3.242467895995898,
                    3.0676256487094316,
                    2.963241877250275,
                    2.912138244312416,
                ]
            ),
            np.array(
                [
                    -48.57270520474883,
                    -39.203947474214466,
                    -30.17541218684815,
                    -22.0470637325586,
                    -15.139121902723385,
                    -9.559833776233653,
                    -5.255559094634078,
                    -2.0686633257527056,
                ]
            ),
        ),
        (
            np.array(
                [
                    5.0,
                    3.9518890033114653,
                    3.108195181237455,
                    2.4548103101267578,
                    1.9675896641232349,
                    1.6174923091614577,
                    1.3748394400683466,
                    1.2123458524619235,
                ]
            ),
            np.array(
                [
                    -80.59999999999998,
                    -66.12617897204218,
                    -52.16195709596029,
                    -39.59972348732113,
                    -28.9550025352838,
                    -20.40842178577873,
                    -13.883327624917449,
                    -9.136372951564958,
                ]
            ),
            np.array(
                [
                    1.0,
                    0.996995777822107,
                    0.9936968299316383,
                    0.990102294505997,
                    0.9862112943768447,
                    0.9820229365215738,
                    0.9775363115298907,
                    0.9727504930438906,
                ]
            ),
            np.array(
                [
                    -0.19999999999999996,
                    -0.2206009855881952,
                    -0.24126177310862373,
                    -0.2619834195187405,
                    -0.2827670165376126,
                    -0.3036136923341275,
                    -0.32452461332447236,
                    -0.3455009860877811,
                ]
            ),
            False,
            True,
            5,
            np.array(
                [
                    5.0,
                    3.819860515628427,
                    2.830726625443936,
                    2.018319476853525,
                    1.3583089244303315,
                    0.8214531990971969,
                    0.37785655776303007,
                    0.0,
                ]
            ),
            np.array(
                [
                    -89.37631939128829,
                    -75.83567198405993,
                    -62.816063629919356,
                    -51.2108983006546,
                    -41.536756894646864,
                    -33.97536934064426,
                    -28.45123483857607,
                    -24.722214467939352,
                ]
            ),
        ),
        (
            np.array(
                [
                    20.0,
                    16.803358574880715,
                    14.222938505347312,
                    12.214744526179867,
                    10.704668483260594,
                    9.60414697788433,
                    8.823063929186802,
                    8.278873328572367,
                ]
            ),
            np.array(
                [
                    -245.59999999999994,
                    -201.9177806730612,
                    -159.87391400903186,
                    -122.15644764756046,
                    -90.30265890868121,
                    -64.83236000028887,
                    -45.48830798253957,
                    -31.514091646994384,
                ]
            ),
            np.array(
                [
                    1.0,
                    0.996995777822107,
                    0.9936968299316383,
                    0.990102294505997,
                    0.9862112943768447,
                    0.9820229365215738,
                    0.9775363115298907,
                    0.9727504930438906,
                ]
            ),
            np.array(
                [
                    -0.19999999999999996,
                    -0.2206009855881952,
                    -0.24126177310862373,
                    -0.2619834195187405,
                    -0.2827670165376126,
                    -0.3036136923341275,
                    -0.32452461332447236,
                    -0.3455009860877811,
                ]
            ),
            True,
            True,
            20,
            np.array(
                [
                    20.0,
                    15.890623716898725,
                    12.3079260007737,
                    9.207649749736786,
                    6.51542031069936,
                    4.142402969183023,
                    1.998205349686872,
                    0.0,
                ]
            ),
            np.array(
                [
                    -306.3634724687466,
                    -268.94019024489455,
                    -233.17342954926616,
                    -201.75155914353593,
                    -176.21218803094547,
                    -157.07547117668523,
                    -144.08452001840072,
                    -136.48328992734292,
                ]
            ),
        ),
    ),
)
def test_enforce_boundary_condition(
    z,
    dchi_ds,
    x_points,
    dx_ds_points,
    spherical,
    zero_potential_boundary,
    normalized_probe_potential,
    expected_corrected_chi,
    expected_corrected_dchi_ds,
):
    """Test that the boundary condition is correctly enforced."""
    corrected_chi, corrected_dchi_ds = initial_profile.enforce_boundary_condition(
        z,
        dchi_ds,
        x_points,
        dx_ds_points,
        spherical=spherical,
        zero_potential_boundary=zero_potential_boundary,
    )

    assert np.isclose(corrected_chi[0], normalized_probe_potential)
    assert np.allclose(corrected_chi, expected_corrected_chi)
    assert np.allclose(corrected_dchi_ds, expected_corrected_dchi_ds)
    assert corrected_chi.size == x_points.size
    assert corrected_dchi_ds.size == x_points.size
    if zero_potential_boundary:
        assert np.isclose(corrected_chi[-1], 0)
