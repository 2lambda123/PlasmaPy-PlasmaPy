name: CI

on:
  push:
    branches:
    - main
    - stable
    - v*.*.x
  pull_request:
  workflow_dispatch:

jobs:

  initial-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        include:

        - name: Python 3.10 (Windows)
          os: windows-latest
          noxenv: tests-3.10
          python: '3.10'
          noxposargs: --durations=10

        - name: Linters
          os: ubuntu-latest
          python: '3.10'

          noxenv: linters

        - name: Import package
          os: windows-latest
          python: '3.10'
          noxenv: import_package

    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Install nox
      run: python -m pip install --progress-bar off --upgrade nox

    - name: ${{ matrix.name }}
      run: nox -s ${{ matrix.noxenv }} -- ${{ matrix.noxposargs }}

  comprehensive-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: initial-tests
    strategy:
      fail-fast: false

      matrix:
        include:

        - name: Python 3.10 (Mac OS)
          os: macos-latest
          noxenv: tests-3.10
          python: '3.10'

        - name: Python 3.8 (Windows)
          os: windows-latest
          python: 3.8
          noxenv: tests-3.8

        - name: Python 3.9 (Ubuntu)
          os: ubuntu-latest
          python: 3.9
          noxenv: tests-3.9

        - name: Import package
          os: windows-latest
          python: 3.9
          noxenv: import_package

    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Install nox
      run: python -m pip install --progress-bar off --upgrade nox

    - name: ${{ matrix.name }}
      run: nox -s ${{ matrix.noxenv }} -- ${{ matrix.noxposargs }}

  documentation:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        include:

        - name: Documentation
          python: '3.10'
          noxenv: build_docs

    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install nox
      # Use a setup-nox action?
      run: python -m pip install --progress-bar off --upgrade nox

    - name: Install graphviz and pandoc
      # Use setup-graphviz and/or setup-pandoc actions?
      run: sudo apt install graphviz pandoc

    - name: Build documentation
      run: nox -e build_docs -- -q

  build-n-publish:
    name: Packaging
    runs-on: ubuntu-20.04
    needs:
    - initial-tests
    - comprehensive-tests
    - documentation
    - import-plasmapy
    steps:
    - uses: actions/checkout@v3
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install requirements
      run: |
        pip install --progress-bar off setuptools numpy wheel setuptools_scm twine build pip
    - name: Build a source tarball
      run: python -m build --sdist --outdir dist/
    - name: Build a binary wheel
      run: python -m build --wheel --outdir dist/
    - name: Twine check
      run: twine check dist/*
    - name: Install PlasmaPy in all variants
      run: |
        pip install --progress-bar off .[dev]
        pip install --progress-bar off -e .[dev]
