name: CI

on:
  push:
    branches:
    - main
    - stable
    - v0.*.x
    tags:
    - v*
  pull_request:
  workflow_dispatch:

jobs:
  initial-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:

        - name: Python 3.10
          os: ubuntu-latest
          python: '3.10'
          toxenv: py310

        - name: Linters
          os: ubuntu-latest
          python: 3.8
          toxenv: linters

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/prepare_env
      with:
        python-version: ${{ matrix.python }}
        dependencies: tox codecov
    - name: Run tests
      run: python3 -m tox ${{ matrix.toxargs }} -e ${{ matrix.toxenv }} -- ${{ matrix.toxposargs }}

  comprehensive-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: initial-tests
    strategy:
      fail-fast: false
      matrix:
        include:

        - name: Python 3.8 with minimal dependencies
          os: ubuntu-latest
          python: 3.8
          toxenv: py38-all-minimal

        - name: Python 3.8, all tests, code coverage
          os: ubuntu-latest
          python: 3.8
          toxenv: py38-all-cov

        - name: Python 3.8 (Windows)
          os: windows-latest
          python: 3.8
          toxenv: py38-all
          toxposargs: --durations=50

        - name: Python 3.8 (MacOS X)
          os: macos-latest
          python: 3.8
          toxenv: py38-all

        - name: Python 3.9, develop mode
          os: ubuntu-latest
          python: 3.9
          toxenv: py39
          toxargs: --develop

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/prepare_env
      with:
        python-version: ${{ matrix.python }}
        dependencies: tox codecov
    - name: Install language-pack-fr and tzdata
      if: startsWith(matrix.name, 'Documentation')
      run: sudo apt-get install graphviz pandoc
    - name: Run tests
      run: python3 -m tox ${{ matrix.toxargs }} -e ${{ matrix.toxenv }} -- ${{ matrix.toxposargs }}
    - name: Upload coverage to codecov
      if: ${{ contains(matrix.toxenv,'-cov') }}
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/prepare_env
      with:
        python-version: 3.8
    - name: Install language-pack-fr and tzdata
      run: sudo apt-get install graphviz pandoc
    - name: Run tests
      run: python3 -m tox -e build_docs -- -q

  codespell:
    name: codespell
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/prepare_env
      with:
        python-version: 3.8
    - name: Run tests
      run: python3 -m tox -e codespell -q

  import-plasmapy:
    name: Importing PlasmaPy
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/prepare_env
      with:
        python-version: 3.8
    - name: Import PlasmaPy
      run: python3 -m tox -e py38-minimal-pypi-import

  build-n-publish:
    name: Packaging
    runs-on: ubuntu-20.04
    needs:
    - initial-tests
    - comprehensive-tests
    - documentation
    - codespell
    - import-plasmapy
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/prepare_env
      with:
        python-version: 3.8
        dependencies: setuptools numpy wheel setuptools_scm twine build pip
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Build a source tarball
      run: python -m build --sdist --outdir dist/
    - name: Build a binary wheel
      run: python -m build --wheel --outdir dist/
    - name: Twine check
      run: twine check dist/*
    - name: Install PlasmaPy in all variants
      run: |
        pip install --progress-bar off .[dev]
        pip install --progress-bar off -e .[dev]
