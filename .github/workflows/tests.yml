name: CI

on:
  push:
    branches:
    - main
    - stable
    - v*.*.*
    tags:
    - v*
  pull_request:
  workflow_dispatch:

jobs:

  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:

        - name: Python 3.12 (Ubuntu), with doctests, skip slow
          os: ubuntu-latest
          python: '3.12'
          toxenv: py312-pins-doctest

        - name: Python 3.11 (macOS), code coverage
          os: macos-latest
          python: '3.11'
          toxenv: py311-pins-cov-all

        - name: Python 3.10 (Ubuntu), minimal dependencies, skip slow
          os: ubuntu-latest
          python: '3.10'
          toxenv: py310-pins-minimal

        - name: mypy
          os: ubuntu-latest
          python: '3.12'
          toxenv: mypy

        - name: Linters
          os: ubuntu-latest
          python: '3.12'
          toxenv: linters

    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        cache: pip

    - name: Install and upgrade tox
      run: python -m pip install --progress-bar off --upgrade tox

    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          .tox
        key: ${{ runner.os }}-${{ matrix.toxenv }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}

    - name: Run tests
      run: tox -e ${{ matrix.toxenv }}

    - name: Upload coverage to codecov if requested
      if: ${{ contains(matrix.toxenv,'-cov') }}
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml

  documentation:

    name: Documentation, pinned dependencies
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install graphviz and pandoc
      run: sudo apt-get install graphviz pandoc

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: pip

    - name: Install tox
      run: python -m pip install --progress-bar off --upgrade tox

    - name: Cache
      uses: actions/cache@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        path: |
          .tox
          docs/_build
          docs/api
          docs
        key: build_docs-${{ runner.os }}-${{ hashFiles('requirements.txt', 'docs/conf.py') }}

    - name: Build docs
      run: tox -e build_docs_pins -- -q

    - name: Print troubleshooting information on failure
      if: ${{ failure() }}
      run: |
        echo "\nDocumentation troubleshooting guide:\n\nhttps://docs.plasmapy.org/en/latest/contributing/doc_guide.html#troubleshooting\n\n"

  import-plasmapy:

    name: Import PlasmaPy
    runs-on: windows-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: pip

    - name: Install tox
      run: python -m pip install --progress-bar off --upgrade tox

    - name: Import PlasmaPy
      run: tox -e py310-minimal-pypi-import

  build-n-publish:
    name: Packaging
    runs-on: ubuntu-22.04

    steps:

    - uses: actions/checkout@v4

    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: pip

    - name: Install and upgrade requirements
      run: |
        pip install --progress-bar off setuptools numpy wheel setuptools_scm twine build pip --upgrade

    - name: Build a source tarball
      run: python -m build --sdist --outdir dist/

    - name: Build a binary wheel
      run: python -m build --wheel --outdir dist/

    - name: Twine check
      run: twine check dist/*

    - name: Install PlasmaPy with pip
      run: |
        pip install --progress-bar off .

    - name: Perform editable installation with tests & docs requirements sets
      run: |
        pip install --progress-bar off -e .[tests,docs]
